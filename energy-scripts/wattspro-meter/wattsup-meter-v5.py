#! /usr/bin/python
# -*- coding: utf-8 -*-

"""
This script extracts information about energy consumption from the data file
generated with WattsUp? Pro Meter.

The script captures the idle status and calculate energy consumption of different states detected.
"""

import argparse
import os
import pprint
import csv
import sys
import statistics

DELIMITER_CSV = '\t'
TIME_STAMP_KEY = "Time"
WATTS_KEY = "Watts"
OUTPUT_FILENAME = "energy_information.csv"

def read_datafile(csvfile):
	""" Get all data from .txt file generated by Watts Up? Pro Meter """
	data = []
	with open(csvfile, 'r') as f:
		lines = f.readlines()

	r = csv.DictReader(lines, delimiter=DELIMITER_CSV)
	for line in r:
		data.append(line)

	data.pop()	# Remove the last element that is rubbish.
	return data

def extract_times(data):
	""" Extract the times from the data """
	return [x[TIME_STAMP_KEY] for x in data]

def get_idle_power(data):
	""" Power (in Watts) of the idle status.
	It corresponds to the 'min' of the values. """
	total_power = extract_power(data)
	return statistics.mode(total_power)

def extract_power(data):
	""" Extract the power (in Watts) from the data. """
	total_power = [float(x[WATTS_KEY]) for x in data]
	return total_power

def get_status_intervals(power, idle_deviation):
	""" Get the different indexes of the intervals for each detected status in the following format:
	[(wakeup1, sleep1), (wakeup2, sleep2)...] """
	indexes = list(range(len(power)))

	#wakeup_indexes = list(filter(lambda x: power[x-1] == 0.0 and power[x] >= idle_deviation, indexes))
	#sleep_indexes = list(filter(lambda x: power[x] >= idle_deviation and power[x+1] <= idle_deviation, indexes))
	wakeup_indexes = list(filter(lambda x: power[x] >= idle_deviation and power[x-1] < idle_deviation, indexes))
	sleep_indexes = list(filter(lambda x: power[x-1] >= idle_deviation and power[x] < idle_deviation, indexes))

	return list(zip(wakeup_indexes, sleep_indexes))

def get_status_info(times, power, interval):
	""" Get the all energy information of the status defined by the provided interval.
	(execution time (ms), power mean (W), energy consumption (J)) """
	power = power[interval[0]:interval[1]+1]
	times = times[interval[0]:interval[1]+2]
	times = list(map(lambda x : int(float(x)*pow(10,8)), times))		# Convert to milliseconds

	deltatimes = [y - x for x, y in zip(times, times[1:])]
	
	execution_time = times[-1] - times[0]
	execution_time_seconds = execution_time/1000	# Convert from milliseconds to seconds.
	mean_power = statistics.mean(power)

	deltatimes = list(map(lambda x : x/1000, deltatimes))	# Convert from milliseconds to seconds.
	energy_consumption = sum([x*y for x, y in zip(power, deltatimes)])	# J = W*t

	execution_time_seconds = round(execution_time_seconds, 2)
	mean_power = round(mean_power, 2)
	energy_consumption = round(energy_consumption, 2)

	return (execution_time, execution_time_seconds, mean_power, energy_consumption)

def get_energy_information(times, power, idle_power, intervals):
	""" Calculate energy consumption of different states defined by the provided intervals """
	energy_info = []
	energy_info.append(["idle", 0.0, idle_power, 0.0])
	counter = 1
	for i in range(0,len(list(intervals))):
		status_info = get_status_info(times, power, intervals[i])
		energy_info.append(["status"+str(counter)]+list(status_info))
		counter += 1

	return energy_info

def save_data(data):
	""" Save the energy information of the different status in a file """
	with open(OUTPUT_FILENAME, 'w', newline='') as csvfile:
		spamwriter = csv.writer(csvfile, delimiter='\t', quoting=csv.QUOTE_MINIMAL)
		spamwriter.writerow(["STATUS", "EXECUTION TIME (ms)", "EXECUTION TIME (s)", "MEAN POWER (W)", "ENERGY CONSUMPTION (J)"])
		for r in data:
			spamwriter.writerow(r)

def get_watts_differ(power, idle_power):
	#print(power)
	print("min:"+str(min(power)))
	print("max:"+str(max(power)))
	print("mode:"+str(statistics.mode(power)))
	print("mean:"+str(statistics.mean(power)))
	print("median:"+str(statistics.median(power)))

	power = list(map(lambda x: x - min(power), power))
	print(power)
	print("min:"+str(min(power)))
	print("max:"+str(max(power)))
	print("mode:"+str(statistics.mode(power)))
	print("mean:"+str(statistics.mean(power)))
	print("median:"+str(statistics.median(power)))


	differ = [y - x for x, y in zip(power, power[1:])]
	differ_print = [str(x) for x in differ]
	#print("\n".join(differ_print))
	differ = [abs(x) for x in differ]

	max_differ = max(differ)
	print(max_differ)
	index_max_differ = differ.index(max_differ)
	print(index_max_differ)
	max_real_differ = power[index_max_differ]
	print(max_real_differ, power[index_max_differ-1], power[index_max_differ+1])
	return differ

if __name__ == "__main__":
	parser = argparse.ArgumentParser(
		description="""Extract energy information from the data file generated with the device WattsUp? Pro Meter.
		It identifies (if possible) the idle status and calculates the energy consumption of different detected states."""
	)

	parser.add_argument('-f', dest='filename', metavar='file', required=True, help='data file generated with WattsUp? Pro Meter.')
	parser.add_argument('-i', dest='idle_power', metavar='iddle_power', type=float, default=None, help='power (Watts) of the idle status.')
	parser.add_argument('-d', dest='idle_deviation', metavar='power_deviation', type=float, default=0.0, help='standard deviation (Watts) of the idle status.')

	args = parser.parse_args()
	filename = args.filename
	idle_power = args.idle_power
	idle_deviation = args.idle_deviation

	data = read_datafile(filename)
	times = extract_times(data)
	power = extract_power(data)
	if idle_power is None:
		idle_power = get_idle_power(data)

	print("==============================")
	print("TOTAL POWER:")
	print("min: "+str(min(power))+" W")
	print("max: "+str(max(power))+" W")
	print("mode: "+str(statistics.mode(power))+" W")
	print("mean: "+str(statistics.mean(power))+" W")
	print("median: "+str(statistics.median(power))+" W")
	print("=============================")
	print("Idle power: "+str(idle_power)+" W")
	print("Idle power deviation: "+str(idle_deviation)+" W")

	real_power = list(map(lambda x: x - idle_power, power))
	print("==============================")
	print("REAL POWER:")
	print("min: "+str(min(real_power))+" W")
	print("max: "+str(max(real_power))+" W")
	print("mode: "+str(statistics.mode(real_power))+" W")
	print("mean: "+str(statistics.mean(real_power))+" W")
	print("median: "+str(statistics.median(real_power))+" W")

	intervals = get_status_intervals(real_power, idle_deviation)
	energy_info = get_energy_information(times, real_power, idle_power, intervals)
	save_data(energy_info)
